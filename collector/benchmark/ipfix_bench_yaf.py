#!/usr/bin/env python2
import socket
import sys
import time


# IPFIX template
tpl = "000a03605b6b68f500008a310000000000020228c013000600b80004800e000100001ad7800f000100001ad7c00e000100001ad7c00f000100001ad780b8000400007279c015001781f6000800001ad781f7000800001ad781f8000800001ad700df000481f4000400001ad781f5000400001ad781fe000400001ad781f9000200001ad781fa000200001ad781fc000200001ad781fb000100001ad700d20001c1f6000800001ad7c1f7000800001ad7c1f8000800001ad780df000400007279c1f4000400001ad7c1f5000400001ad7c1fe000400001ad7c1f9000200001ad7c1fa000200001ad7c1fc000200001ad700d20002b301000e0098000800990008005500040056000400080004000c000400070002000b00028028000200001ad70004000100880001003a0002000500010125ffffc01800028012ffff00001ad7c012ffff00001ad7b80000270098000800990008005500088055000800007279005600088056000800007279000100088001000800007279000200088002000800007279001b0010001c001000080004000c000400070002000b00028028000200001ad7c028000200001ad7000400010088000100d200028015000400001ad700b8000480b8000400007279800e000100001ad7800f000100001ad7c00e000100001ad7c00f000100001ad7003a0002803a000200007279000a0004000e000400050001800500010000727900460003004700030048000300d200050125ffffc003000300b80004800e000100001ad7800f000100001ad70003007cd000000e000200a00008002a0008005600080087000800a4000800a700088064000400001ad78065000400001ad78068000400001ad78069000400001ad700820004009000048066000400001ad78067000400001ad7d001000400028227000200001ad78228000200001ad78226000400001ad70124ffff000200acd00200020090000401420004c00400020038000600500006c005000b81f6000800001ad781f7000800001ad781f8000800001ad700df000481f4000400001ad781f5000400001ad781fe000400001ad781f9000200001ad781fa000200001ad781fc000200001ad781fb000100001ad7c00900058121000800001ad78122000400001ad78123000200001ad78124000100001ad78125000100001ad7c00800018012ffff00001ad7".decode("hex")

# IPFIX, 24 flows:
data = "000a056c5b6b68f300004c6200000000b301055c0000015deb2acf440000015deb2acf4f00000531000000080ac8c91d12dcd028e0c6005000000603000000ff000b03c003000ad7c1a90a02190000015deb2acf450000015deb2acf4f000009b70000000712dcd0280ac8c91d0050e0c600000603000000ff000b03c003000aab3a8fb712190000015deb2ae2dc0000015deb2ae2e700000528000000080ac8c91d12dcd028e0c8005000000603000000ff000b03c003000a7a11618502190000015deb2ae2dd0000015deb2ae2e7000009b70000000712dcd0280ac8c91d0050e0c800000603000000ff000b03c003000ac61a4e3212190000015deb2af6740000015deb2af6800000052d000000080ac8c91d12dcd028e0ca005000000603000000ff000b03c003000ab8db782602190000015deb2af6760000015deb2af680000009b70000000712dcd0280ac8c91d0050e0ca00000603000000ff000b03c003000a4d50975012190000015deb2b0a0d0000015deb2b0a2300000531000000080ac8c91d12dcd028e0cc005000000603000000ff000b03c003000a66b4ff9c02190000015deb2b0a0e0000015deb2b0a23000009b70000000712dcd0280ac8c91d0050e0cc00000603000000ff000b03c003000a1975239f12190000015deb2b1db00000015deb2b1dbb00000528000000080ac8c91d12dcd028e0ce005000000603000000ff000b03c003000ad154a64902190000015deb2b1db10000015deb2b1dbb000009b70000000712dcd0280ac8c91d0050e0ce00000603000000ff000b03c003000af8124bba12190000015deb2b31490000015deb2b315c00000528000000080ac8c91d12dcd028e0d0005000000603000000ff000b03c003000a9d010dac02190000015deb2b314a0000015deb2b315c000009b70000000712dcd0280ac8c91d0050e0d000000603000000ff000b03c003000a454a1c9b12190000015deb2b44e90000015deb2b44f500000528000000080ac8c91d12dcd028e0d2005000000603000000ff000b03c003000a332a1ddf02190000015deb2b44ea0000015deb2b44f5000009b70000000712dcd0280ac8c91d0050e0d200000603000000ff000b03c003000ab46c699d12190000015deb2b58820000015deb2b588d00000531000000080ac8c91d12dcd028e0d4005000000603000000ff000b03c003000ab5ca9d1f02190000015deb2b58830000015deb2b588d000009b70000000712dcd0280ac8c91d0050e0d400000603000000ff000b03c003000ab4706b9112190000015deb2b6c1b0000015deb2b6c2f0000052d000000080ac8c91d12dcd028e0d6005000000603000000ff000b03c003000a5ffec2a302190000015deb2b6c1b0000015deb2b6c2f000009b70000000712dcd0280ac8c91d0050e0d600000603000000ff000b03c003000a22c2bacc12190000015deb2b7fbd0000015deb2b7fc700000528000000080ac8c91d12dcd028e0d8005000000603000000ff000b03c003000aa98163f702190000015deb2b7fbd0000015deb2b7fc7000009b70000000712dcd0280ac8c91d0050e0d800000603000000ff000b03c003000ad2e9192612190000015deb2b93540000015deb2b936000000528000000080ac8c91d12dcd028e0da005000000603000000ff000b03c003000a48a106b702190000015deb2b93550000015deb2b9360000009b70000000712dcd0280ac8c91d0050e0da00000603000000ff000b03c003000a6d707b5612190000015deb2ba6ee0000015deb2ba6f800000528000000080ac8c91d12dcd028e0dc005000000603000000ff000b03c003000a1b4d1c6202190000015deb2ba6ee0000015deb2ba6f8000009b70000000712dcd0280ac8c91d0050e0dc00000603000000ff000b03c003000a8916b4661219".decode("hex")

host = sys.argv[1]
port = 2055
N = 150000
flowsPerPacket = 24

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.sendto(tpl, (host, port))
time.sleep(0.2)

ts = time.time()
print("%d: started sending %d YAF flows in %d packets totaling %d bytes" % (ts,N*flowsPerPacket, N, N*len(data)))
print("%d: flow size %d, packet size %d" % (ts, len(data) / flowsPerPacket, len(data)))

for i in range(0, N):
    sock.sendto(data, (host, port))
