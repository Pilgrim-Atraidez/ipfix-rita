#!/usr/bin/env python2
import socket
import sys
import time


# IPFIX template
tpl = "000a00585b6b5242000010bda07e8c000002004801640010000100040002000400040001001b001000070002000a0004000b0002001c0010000e0004003e0010001500040016000401190010011a001000e3000200e40002".decode("hex")

# IPFIX, 24 flows:
data = "000a01d85b6b834f0000a441a07e8c00016401c80000009c000000013afe8000000000000018abe575a240348f008f00000002008fff020000000000000000000000000016000000020000000000000000000000000000000000d159c000d159c0fe8000000000000018abe575a240348fff020000000000000000000000000016008f008f00000060000000013afe8000000000000018abe575a240348f008f00000002008fff020000000000000000000000000016000000020000000000000000000000000000000000d15da800d15da8fe8000000000000018abe575a240348fff020000000000000000000000000016008f008f00000088000000013afe8000000000000018abe575a240348f008f00000002008fff020000000000000000000000000016000000020000000000000000000000000000000000d1619000d16190fe8000000000000018abe575a240348fff020000000000000000000000000016008f008f0000004c000000013afe8000000000000018abe575a240348f008f00000002008fff020000000000000000000000000016000000020000000000000000000000000000000000d1657800d16578fe8000000000000018abe575a240348fff020000000000000000000000000016008f008f".decode("hex")

host = sys.argv[1]
port = 2055
N = 150000
flowsPerPacket = 4

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.sendto(tpl, (host, port))
time.sleep(0.2)

ts = time.time()
print("%d: started sending %d SonicWALL flows in %d packets totaling %d bytes" % (ts,N*flowsPerPacket, N, N*len(data)))
print("%d: flow size %d, packet size %d" % (ts, len(data) / flowsPerPacket, len(data)))

for i in range(0, N):
    sock.sendto(data, (host, port))
